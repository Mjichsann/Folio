{"version":3,"sources":["components/helper.js","components/Table1/DynamicColumnsTable.jsx","components/Table1/DynamicColumnsHelper.js","components/Table1/data.js","components/Table1/table1.js","components/Table2/DynamicColumnsTable.jsx","components/Table2/DynamicColumnsHelper.js","components/Table2/data.js","components/Table2/table2.js","components/Table3/DynamicColumnsTable.jsx","components/Table3/DynamicColumnsHelper.js","components/Table3/data.js","components/Table3/table3.js","data_access/API.js","pages/dashboard.js","components/export.js","App.js","serviceWorker.js","index.js"],"names":["currencyFormat","num","toFixed","replace","DynamicColumnsTable","props","columns","rowKey","height","source","width","loading","dataSource","scroll","x","pagination","getTextWidth","text","font","canvas","document","createElement","context","getContext","metrics","measureText","Math","round","dataIndex","title","fixed","Table1","dataTable","maxWidthPerCell","columnsParsed","JSON","parse","stringify","columnsWithWidth","map","column","Object","assign","entry","indexColumn","columnWidth","cellValue","values","cellWidth","tableWidth","reduce","a","b","calculateColumnsWidth","landingPageTable","className","Table2","dataSubmissionTable","Table3","leadSubmissionTable","apiEndpoint","process","getDataPost","url","body","callback","errorCallback","axios","post","headers","response","data","Dashboard","useEffect","getData","year","val","useState","setLoading","name","chartData","setChartData","time","length","temp","payload","getDataPengajuan","moment","format","result","i","type","push","Product","BU","January","February","March","April","May","June","July","August","September","October","November","December","y","console","log","setYear","opacity1","setOpacity1","opacity2","setOpacity2","opacity3","setOpacity3","theme","createTheme","overrides","MuiTextField","root","marginTop","MuiInputLabel","color","paddingTop","marginBottom","textAlign","fontSize","fontWeight","MuiInputBase","MuiSvgIcon","legendOnclick","dataKey","style","backgroundColor","Row","Col","xs","marginLeft","letterSpacing","ThemeProvider","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","views","label","minDate","Date","maxDate","value","onChange","newValue","renderInput","params","TextField","helperText","Button","size","borderColor","paddingLeft","paddingRight","onClick","icon","faFilter","data1","data2","data3","fileId","ws1","XLSX","json_to_sheet","origin","ws2","ws3","wscols","wch","wb","book_new","book_append_sheet","sheet_add_json","Name","RollNo","skipHeader","excelBuffer","bookType","excelData","Blob","FileSaver","exportToExcel","faArrowAltCircleDown","border","lineHeight","BarChart","opacity","userSelect","pointerEvents","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","tickFormatter","Tooltip","Bar","barSize","radius","fill","clear","class","toString","ReactDOM","querySelector","App","exact","path","component","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.239d9f46.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport const currencyFormat = (num) => {\n  return num.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n};\n\nexport const formatDate = (string) => {\n  var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n  return new Date(string).toLocaleDateString([], options);\n};\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nconst DynamicColumnsTable = props => {\n  const { columns, height, rowKey, source, width, loading } = props;\n  // console.log(\"width = \"+width)\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={source}\n      rowKey={rowKey}\n      scroll={{ x: width }}\n      pagination={false}\n      loading={loading}\n      \n    />\n  );\n};\n\n\nexport default DynamicColumnsTable;\n","/**\n * This function calculate the width of a string based on its length\n * @param {String} text\n * @param {String} font\n */\nconst getTextWidth = (text, font = \"14px -apple-system\") => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return Math.round(metrics.width + 80);\n};\n\n/**\n * This function calculates the width of each column based in all CELL VALUES\n * @param {Array} columns\n * @param {Array} source\n * @param {Number} maxWidthPerCell\n */\nexport const calculateColumnsWidth = (\n  columns,\n  source,\n  maxWidthPerCell = 500\n) => {\n  const columnsParsed = JSON.parse(JSON.stringify(columns));\n\n  // First we calculate the width for each column\n  // The column width is based on its string length\n\n  const columnsWithWidth = columnsParsed.map((column) =>\n    Object.assign(column, {\n      width: getTextWidth(column.title),\n    })\n  );\n\n  // Since we have a minimum width (column's width already calculated),\n  // now we are going to verify if the cell value is bigger\n  // than the column width which is already set\n\n  source.map((entry) => {\n    columnsWithWidth.map((column, indexColumn) => {\n      const columnWidth = column.width;\n      const cellValue = Object.values(entry)[indexColumn];\n\n      // Get the string width based on chars length\n      let cellWidth = getTextWidth(cellValue);\n\n      // Verify if the cell value is smaller than column's width\n      if (cellWidth < columnWidth) cellWidth = columnWidth;\n\n      // Verify if the cell value width is bigger than our max width flag\n      if (cellWidth > maxWidthPerCell) cellWidth = maxWidthPerCell;\n\n      // Update the column width\n      columnsWithWidth[indexColumn].width = cellWidth;\n    });\n  });\n\n  // Sum of all columns width to determine the table max width\n  const tableWidth = columnsWithWidth\n    .map((column) => column.width)\n    .reduce((a, b) => {\n      return a + b;\n    });\n\n  return {\n    columns: columnsWithWidth,\n    source,\n    tableWidth,\n  };\n};\n","import { currencyFormat } from \"../helper\";\n\nexport const columns = [\n  { dataIndex: \"Product\", title: \"Product       \", fixed: \"left\" },\n  { dataIndex: \"BU\", title: \"BU\", fixed: \"left\" },\n  { dataIndex: \"January\", title: \"January\" },\n  { dataIndex: \"February\", title: \"February\" },\n  { dataIndex: \"March\", title: \"March\" },\n  { dataIndex: \"April\", title: \"April\" },\n  { dataIndex: \"May\", title: \"May\" },\n  { dataIndex: \"June\", title: \"June\" },\n  { dataIndex: \"July\", title: \"July\" },\n  { dataIndex: \"August\", title: \"August\" },\n  { dataIndex: \"September\", title: \"September\" },\n  { dataIndex: \"October\", title: \"October\" },\n  { dataIndex: \"November\", title: \"November\" },\n  { dataIndex: \"December\", title: \"December\" },\n];\n","// import \"antd/dist/antd.css\";\nimport \"../../css/page.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport DynamicColumnsTable from \"./DynamicColumnsTable\";\nimport { calculateColumnsWidth } from \"./DynamicColumnsHelper\";\n\n// Static data\nimport { columns } from \"./data\";\n\nimport { landingPageTable } from \"../../pages/dashboard\";\n\nexport const Table1 = (loading) => {\n  const maxWidthPerCell = 500;\n  const rowKey = \"key\";\n\n  // This helper function helps to calculate the width for each column\n  // based on all table cells - column cell and source cell\n  const dataTable = calculateColumnsWidth(\n    columns,\n    landingPageTable,\n    maxWidthPerCell\n  );\n\n  return (\n    <div className=\"App\">\n      <DynamicColumnsTable\n        columns={dataTable.columns}\n        rowKey={rowKey}\n        source={dataTable.source}\n        width={1050}\n        loading={loading}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nconst DynamicColumnsTable = props => {\n  const { columns, height, rowKey, source, width, loading } = props;\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={source}\n      rowKey={rowKey}\n      scroll={{ x: width }}\n      pagination={false}\n      loading={loading}\n\n    />\n  );\n};\n\nexport default DynamicColumnsTable;\n","/**\n * This function calculate the width of a string based on its length\n * @param {String} text\n * @param {String} font\n */\nconst getTextWidth = (text, font = \"14px -apple-system\") => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return Math.round(metrics.width + 80);\n};\n\n/**\n * This function calculates the width of each column based in all CELL VALUES\n * @param {Array} columns\n * @param {Array} source\n * @param {Number} maxWidthPerCell\n */\nexport const calculateColumnsWidth = (\n  columns,\n  source,\n  maxWidthPerCell = 500\n) => {\n  const columnsParsed = JSON.parse(JSON.stringify(columns));\n\n  // First we calculate the width for each column\n  // The column width is based on its string length\n\n  const columnsWithWidth = columnsParsed.map((column) =>\n    Object.assign(column, {\n      width: getTextWidth(column.title),\n    })\n  );\n\n  // Since we have a minimum width (column's width already calculated),\n  // now we are going to verify if the cell value is bigger\n  // than the column width which is already set\n\n  source.map((entry) => {\n    columnsWithWidth.map((column, indexColumn) => {\n      const columnWidth = column.width;\n      const cellValue = Object.values(entry)[indexColumn];\n\n      // Get the string width based on chars length\n      let cellWidth = getTextWidth(cellValue);\n\n      // Verify if the cell value is smaller than column's width\n      if (cellWidth < columnWidth) cellWidth = columnWidth;\n\n      // Verify if the cell value width is bigger than our max width flag\n      if (cellWidth > maxWidthPerCell) cellWidth = maxWidthPerCell;\n\n      // Update the column width\n      columnsWithWidth[indexColumn].width = cellWidth;\n    });\n  });\n\n  // Sum of all columns width to determine the table max width\n  const tableWidth = columnsWithWidth\n    .map((column) => column.width)\n    .reduce((a, b) => {\n      return a + b;\n    });\n\n  return {\n    columns: columnsWithWidth,\n    source,\n    tableWidth,\n  };\n};\n","export const columns = [\n  { dataIndex: \"Product\", title: \"Product       \", fixed: \"left\" },\n  { dataIndex: \"BU\", title: \"BU\", fixed: \"left\" },\n  { dataIndex: \"January\", title: \"January\" },\n  { dataIndex: \"February\", title: \"February\" },\n  { dataIndex: \"March\", title: \"March\" },\n  { dataIndex: \"April\", title: \"April\" },\n  { dataIndex: \"May\", title: \"May\" },\n  { dataIndex: \"June\", title: \"June\" },\n  { dataIndex: \"July\", title: \"July\" },\n  { dataIndex: \"August\", title: \"August\" },\n  { dataIndex: \"September\", title: \"September\" },\n  { dataIndex: \"October\", title: \"October\" },\n  { dataIndex: \"November\", title: \"November\" },\n  { dataIndex: \"December\", title: \"December\" },\n];\n\nexport const source = [\n  {\n    January: 22209,\n    February: 12092,\n    March: 22209,\n    April: 12092,\n    May: 22209,\n    June: 12092,\n    July: 22209,\n    August: 22209,\n    September: 22209,\n    October: 12092,\n    November: 22209,\n    December: 12092,\n\n    Product: \"Permata Moxaku\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 22209,\n    February: 12092,\n    March: 22209,\n    April: 12092,\n    May: 22209,\n    June: 12092,\n    July: 22209,\n    August: 22209,\n    September: 22209,\n    October: 12092,\n    November: 22209,\n    December: 12092,\n\n    Product: \"Motor Baru\",\n    BU: \"Permata\",\n  },\n  {\n    January: 229,\n    February: 192,\n    March: 222,\n    April: 122,\n    May: 222,\n    June: 1292,\n    July: 229,\n    August: 209,\n    September: 209,\n    October: 192,\n    November: 2209,\n    December: 12,\n\n    Product: \"Mobil Baru\",\n    BU: \"ACC\",\n  },\n  {\n    January: 209,\n    February: 192,\n    March: 209,\n    April: 92,\n    May: 229,\n    June: 192,\n    July: 229,\n    August: 229,\n    September: 209,\n    October: 120,\n    November: 229,\n    December: 122,\n\n    Product: \"Sewa Mobil\",\n    BU: \"TRA-MOVIC\",\n  },\n  {\n    January: 229,\n    February: 122,\n    March: 235,\n    April: 124,\n    May: 269,\n    June: 162,\n    July: 259,\n    August: 224,\n    September: 239,\n    October: 122,\n    November: 292,\n    December: 122,\n\n    Product: \"Mobil Bekas\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 229,\n    February: 120,\n    March: 229,\n    April: 152,\n    May: 239,\n    June: 142,\n    July: 259,\n    August: 209,\n    September: 222,\n    October: 142,\n    November: 249,\n    December: 132,\n\n    Product: \"Gadget\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 229,\n    February: 192,\n    March: 222,\n    April: 122,\n    May: 209,\n    June: 120,\n    July: 223,\n    August: 209,\n    September: 229,\n    October: 92,\n    November: 222,\n    December: 92,\n\n    Product: \"Asuransi Jiwa\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 209,\n    February: 192,\n    March: 209,\n    April: 92,\n    May: 209,\n    June: 129,\n    July: 222,\n    August: 209,\n    September: 209,\n    October: 102,\n    November: 229,\n    December: 292,\n\n    Product: \"Furniture\",\n    BU: \"FIFGROUP\",\n  },\n];\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport DynamicColumnsTable from \"./DynamicColumnsTable\";\nimport { calculateColumnsWidth } from \"./DynamicColumnsHelper\";\n\n// Static data\nimport { columns, source } from \"./data\";\nimport { dataSubmissionTable } from \"../../pages/dashboard\";\n\nexport const Table2 = (loading) => {\n  const maxWidthPerCell = 600;\n  const tableHeight = 1500;\n  const rowKey = \"id\";\n\n  // This helper function helps to calculate the width for each column\n  // based on all table cells - column cell and source cell\n  const dataTable = calculateColumnsWidth(\n    columns,\n    dataSubmissionTable,\n    maxWidthPerCell\n  );\n\n  return (\n    <div className=\"App\">\n      <DynamicColumnsTable\n        columns={dataTable.columns}\n        height={tableHeight}\n        rowKey={rowKey}\n        source={dataTable.source}\n        width={dataTable.tableWidth}\n        loading={loading}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nconst DynamicColumnsTable = props => {\n  const { columns, height, rowKey, source, width, loading } = props;\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={source}\n      rowKey={rowKey}\n      scroll={{ x: width }}\n      pagination={false}\n      loading={loading}\n    />\n  );\n};\n\nexport default DynamicColumnsTable;\n","/**\n * This function calculate the width of a string based on its length\n * @param {String} text\n * @param {String} font\n */\nconst getTextWidth = (text, font = \"14px -apple-system\") => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  context.font = font;\n  const metrics = context.measureText(text);\n  return Math.round(metrics.width + 80);\n};\n\n/**\n * This function calculates the width of each column based in all CELL VALUES\n * @param {Array} columns\n * @param {Array} source\n * @param {Number} maxWidthPerCell\n */\nexport const calculateColumnsWidth = (\n  columns,\n  source,\n  maxWidthPerCell = 500\n) => {\n  const columnsParsed = JSON.parse(JSON.stringify(columns));\n\n  // First we calculate the width for each column\n  // The column width is based on its string length\n\n  const columnsWithWidth = columnsParsed.map((column) =>\n    Object.assign(column, {\n      width: getTextWidth(column.title),\n    })\n  );\n\n  // Since we have a minimum width (column's width already calculated),\n  // now we are going to verify if the cell value is bigger\n  // than the column width which is already set\n\n  source.map((entry) => {\n    columnsWithWidth.map((column, indexColumn) => {\n      const columnWidth = column.width;\n      const cellValue = Object.values(entry)[indexColumn];\n\n      // Get the string width based on chars length\n      let cellWidth = getTextWidth(cellValue);\n\n      // Verify if the cell value is smaller than column's width\n      if (cellWidth < columnWidth) cellWidth = columnWidth;\n\n      // Verify if the cell value width is bigger than our max width flag\n      if (cellWidth > maxWidthPerCell) cellWidth = maxWidthPerCell;\n\n      // Update the column width\n      columnsWithWidth[indexColumn].width = cellWidth;\n    });\n  });\n\n  // Sum of all columns width to determine the table max width\n  const tableWidth = columnsWithWidth\n    .map((column) => column.width)\n    .reduce((a, b) => {\n      return a + b;\n    });\n\n  return {\n    columns: columnsWithWidth,\n    source,\n    tableWidth,\n  };\n};\n","export const columns = [\n  { dataIndex: \"Product\", title: \"Product       \", fixed: \"left\" },\n  { dataIndex: \"BU\", title: \"BU\", fixed: \"left\" },\n  { dataIndex: \"January\", title: \"January\" },\n  { dataIndex: \"February\", title: \"February\" },\n  { dataIndex: \"March\", title: \"March\" },\n  { dataIndex: \"April\", title: \"April\" },\n  { dataIndex: \"May\", title: \"May\" },\n  { dataIndex: \"June\", title: \"June\" },\n  { dataIndex: \"July\", title: \"July\" },\n  { dataIndex: \"August\", title: \"August\" },\n  { dataIndex: \"September\", title: \"September\" },\n  { dataIndex: \"October\", title: \"October\" },\n  { dataIndex: \"November\", title: \"November\" },\n  { dataIndex: \"December\", title: \"December\" },\n];\n\nexport const source = [\n  {\n    January: 22209,\n    February: 12092,\n    March: 22209,\n    April: 12092,\n    May: 22209,\n    June: 12092,\n    July: 22209,\n    August: 22209,\n    September: 22209,\n    October: 12092,\n    November: 22209,\n    December: 12092,\n\n    Product: \"Permata Moxaku\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 22209,\n    February: 12092,\n    March: 22209,\n    April: 12092,\n    May: 22209,\n    June: 12092,\n    July: 22209,\n    August: 22209,\n    September: 22209,\n    October: 12092,\n    November: 22209,\n    December: 12092,\n\n    Product: \"Motor Baru\",\n    BU: \"Permata\",\n  },\n  {\n    January: 229,\n    February: 192,\n    March: 222,\n    April: 122,\n    May: 222,\n    June: 1292,\n    July: 229,\n    August: 209,\n    September: 209,\n    October: 192,\n    November: 2209,\n    December: 12,\n\n    Product: \"Mobil Baru\",\n    BU: \"ACC\",\n  },\n  {\n    January: 209,\n    February: 192,\n    March: 209,\n    April: 92,\n    May: 229,\n    June: 192,\n    July: 229,\n    August: 229,\n    September: 209,\n    October: 120,\n    November: 229,\n    December: 122,\n\n    Product: \"Sewa Mobil\",\n    BU: \"TRA-MOVIC\",\n  },\n  {\n    January: 229,\n    February: 122,\n    March: 235,\n    April: 124,\n    May: 269,\n    June: 162,\n    July: 259,\n    August: 224,\n    September: 239,\n    October: 122,\n    November: 292,\n    December: 122,\n\n    Product: \"Mobil Bekas\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 229,\n    February: 120,\n    March: 229,\n    April: 152,\n    May: 239,\n    June: 142,\n    July: 259,\n    August: 209,\n    September: 222,\n    October: 142,\n    November: 249,\n    December: 132,\n\n    Product: \"Gadget\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 229,\n    February: 192,\n    March: 222,\n    April: 122,\n    May: 209,\n    June: 120,\n    July: 223,\n    August: 209,\n    September: 229,\n    October: 92,\n    November: 222,\n    December: 92,\n\n    Product: \"Asuransi Jiwa\",\n    BU: \"FIFGROUP\",\n  },\n  {\n    January: 209,\n    February: 192,\n    March: 209,\n    April: 92,\n    May: 209,\n    June: 129,\n    July: 222,\n    August: 209,\n    September: 209,\n    October: 102,\n    November: 229,\n    December: 292,\n\n    Product: \"Furniture\",\n    BU: \"FIFGROUP\",\n  },\n];\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport DynamicColumnsTable from \"./DynamicColumnsTable\";\nimport { calculateColumnsWidth } from \"./DynamicColumnsHelper\";\n\n// Static data\nimport { columns, source } from \"./data\";\nimport { leadSubmissionTable } from \"../../pages/dashboard\";\n\nexport const Table3 = (loading) => {\n  const maxWidthPerCell = 600;\n  const tableHeight = 1500;\n  const rowKey = \"id\";\n\n  // This helper function helps to calculate the width for each column\n  // based on all table cells - column cell and source cell\n  const dataTable = calculateColumnsWidth(\n    columns,\n    leadSubmissionTable,\n    maxWidthPerCell\n  );\n\n  return (\n    <div className=\"App\">\n      <DynamicColumnsTable\n        columns={dataTable.columns}\n        height={tableHeight}\n        rowKey={rowKey}\n        source={dataTable.source}\n        width={dataTable.tableWidth}\n        loading={loading}\n      />\n    </div>\n  );\n};\n","import axios from \"axios\";\n\nconst apiEndpoint = `${process.env.REACT_APP_BASE_URL}`;\n\nconst getDataPost = async (url, body, callback, errorCallback) => {\n  try {\n    const response = await axios.post(url, body, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    callback(response.data);\n  } catch (error) {\n    errorCallback(error);\n  }\n};\n\nexport const getToken = (payload, callback, errorCallback) => {\n  const url = `${apiEndpoint}/dolphin/apiv1/graph/auth`;\n  const body = JSON.stringify(payload);\n  getDataPost(url, body, callback, errorCallback);\n};\n\nexport const postDataUsingAuth = async (\n  url,\n  header,\n  callback,\n  errorCallback\n) => {\n  try {\n    const response = await axios.post(\n      url,\n      {},\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + header,\n        },\n      }\n    );\n    callback(response.data);\n  } catch (error) {\n    errorCallback(error);\n  }\n};\nexport const getDataUsingAuth = async (\n  url,\n  header,\n  callback,\n  errorCallback\n) => {\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + header,\n      },\n    });\n    callback(response.data);\n  } catch (error) {\n    errorCallback(error);\n  }\n};\n\nexport const getDataPengajuan = (payload, callback, errorCallback) => {\n  const url = `${apiEndpoint}/dolphin/apiv1/graph/workflow/2a400b6d082d8a46388c2fee940f38cb/WF/node-1647586704533/dataQueryPengajuan`;\n  const body = JSON.stringify(payload);\n  getDataPost(url, body, callback, errorCallback);\n};\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport * as ReactDOM from \"react-dom\";\n// import { useSearchParams } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport Box from \"@mui/material/Box\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useParams,\n} from \"react-router-dom\";\n\nimport \"../css/page.css\";\nimport DatePicker from \"@mui/lab/DatePicker\";\n\nimport { Divider } from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowLeft,\n  faArrowRight,\n  faArrowAltCircleDown,\n  faFilter,\n  faExternalLinkAlt,\n} from \"@fortawesome/fontawesome-free-solid\";\n\n//Date input\nimport { TextField, createTheme, ThemeProvider } from \"@material-ui/core\";\nimport DateRangePicker from \"@mui/lab/DateRangePicker\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n//Select\nimport Select, { components } from \"react-select\";\n\n//table\nimport Table from \"@mui/material/Table\";\nimport { styled } from \"@mui/material/styles\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableSortLabel from \"@mui/material/TableSortLabel\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport { visuallyHidden } from \"@mui/utils\";\nimport moment from \"moment\";\n\n//Currency\nimport NumberFormat from \"react-number-format\";\nimport { currencyFormat } from \"../components/helper\";\n\n//Table\nimport { Table1 } from \"../components/Table1/table1\";\nimport { Table2 } from \"../components/Table2/table2\";\nimport { Table3 } from \"../components/Table3/table3\";\n\n//Chart\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nimport { getDataPengajuan } from \"../data_access/API\";\nimport { exportToExcel } from \"../components/export\";\nexport const landingPageTable = [];\nexport const dataSubmissionTable = [];\nexport const leadSubmissionTable = [];\n\nfunction Dashboard() {\n  useEffect(() => {\n    getData(year);\n\n    // console.log(moment(year).format(\"YYYY\"));\n  }, []);\n\n  const [loading, setLoading] = useState(true);\n\n  const [chartData, setChartData] = useState([\n    {\n      name: \"Jan\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Feb\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Mar\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Apr\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"May\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Jun\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Jul\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Aug\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Sep\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Oct\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Nov\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n    {\n      name: \"Dec\",\n      \"Landing Page/Widget\": 0,\n      \"Data Submission\": 0,\n      \"Leads Submission\": 0,\n    },\n  ]);\n\n  const getData = (time) => {\n    setLoading(true);\n    landingPageTable.length = 0;\n    dataSubmissionTable.length = 0;\n    leadSubmissionTable.length = 0;\n    var temp = [\n      {\n        name: \"Jan\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Feb\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Mar\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Apr\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"May\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Jun\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Jul\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Aug\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Sep\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Oct\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Nov\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n      {\n        name: \"Dec\",\n        \"Landing Page/Widget\": 0,\n        \"Data Submission\": 0,\n        \"Leads Submission\": 0,\n      },\n    ];\n\n    setChartData(temp);\n\n    const body = {\n      year: moment(time).format(\"YYYY\"),\n    };\n\n    const onSuccess = (data) => {\n      data.data.result.map((x, i) => {\n        if (x.type === \"Widget\") {\n          landingPageTable.push({\n            Product: x[\"product\"],\n            BU: x[\"bu\"],\n            January: x[\"01\"],\n            February: x[\"02\"],\n            March: x[\"03\"],\n            April: x[\"04\"],\n            May: x[\"05\"],\n            June: x[\"06\"],\n            July: x[\"07\"],\n            August: x[\"08\"],\n            September: x[\"09\"],\n            October: x[\"10\"],\n            November: x[\"11\"],\n            December: x[\"12\"],\n          });\n\n          for (var y = 0; y < 12; y++) {\n            if (y < 9) {\n              temp[y][\"Landing Page/Widget\"] += x[`0${y + 1}`];\n            } else {\n              temp[y][\"Landing Page/Widget\"] += x[`${y + 1}`];\n            }\n            console.log(\"y = \" + y);\n          }\n        } else if (x.type === \"Data Submission\") {\n          dataSubmissionTable.push({\n            Product: x[\"product\"],\n            BU: x[\"bu\"],\n            January: x[\"01\"],\n            February: x[\"02\"],\n            March: x[\"03\"],\n            April: x[\"04\"],\n            May: x[\"05\"],\n            June: x[\"06\"],\n            July: x[\"07\"],\n            August: x[\"08\"],\n            September: x[\"09\"],\n            October: x[\"10\"],\n            November: x[\"11\"],\n            December: x[\"12\"],\n          });\n\n          for (var y = 0; y < 12; y++) {\n            if (y < 9) {\n              temp[y][\"Data Submission\"] += x[`0${y + 1}`];\n            } else {\n              temp[y][\"Data Submission\"] += x[`${y + 1}`];\n            }\n            console.log(\"y = \" + y);\n          }\n        } else if (x.type === \"Lead Submission\") {\n          leadSubmissionTable.push({\n            Product: x[\"product\"],\n            BU: x[\"bu\"],\n            January: x[\"01\"],\n            February: x[\"02\"],\n            March: x[\"03\"],\n            April: x[\"04\"],\n            May: x[\"05\"],\n            June: x[\"06\"],\n            July: x[\"07\"],\n            August: x[\"08\"],\n            September: x[\"09\"],\n            October: x[\"10\"],\n            November: x[\"11\"],\n            December: x[\"12\"],\n          });\n\n          for (var y = 0; y < 12; y++) {\n            if (y < 9) {\n              temp[y][\"Leads Submission\"] += x[`0${y + 1}`];\n            } else {\n              temp[y][\"Leads Submission\"] += x[`${y + 1}`];\n            }\n            console.log(\"y = \" + y);\n          }\n        }\n      });\n\n      setLoading(false);\n      setChartData(temp);\n    };\n    const onFailure = () => {\n      // console.log(\"error\");\n    };\n    getDataPengajuan(body, onSuccess, onFailure);\n  };\n\n  const truncate = (str, n) => {\n    return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n  const [year, setYear] = useState(moment().format());\n\n  const [opacity1, setOpacity1] = useState(1);\n  const [opacity2, setOpacity2] = useState(1);\n  const [opacity3, setOpacity3] = useState(1);\n\n  const chart = (val) => {\n    return (\n      <>\n        <BarChart\n          style={\n            loading === true\n              ? { opacity: \"0.5\", userSelect: \"none\", pointerEvents: \"none\" }\n              : { opacity: \"1\" }\n          }\n          width={1050}\n          height={300}\n          data={val}\n          margin={{\n            top: 20,\n            right: 20,\n            left: 30,\n            bottom: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis tickFormatter={currencyFormat} />\n          <Tooltip />\n          {/* <Legend /> */}\n          <Bar\n            dataKey=\"Landing Page/Widget\"\n            label=\"Landing Page/Widget\"\n            barSize={6}\n            radius={[4, 4, 0, 0]}\n            opacity={opacity1}\n            fill=\"#465DEF\"\n          />\n          <Bar\n            dataKey=\"Data Submission\"\n            label=\"Data Submission\"\n            barSize={6}\n            radius={[4, 4, 0, 0]}\n            opacity={opacity2}\n            fill=\"#FF9F5A\"\n          />\n          <Bar\n            dataKey=\"Leads Submission\"\n            label=\"Leads Submission\"\n            barSize={6}\n            radius={[4, 4, 0, 0]}\n            opacity={opacity3}\n            fill=\"#00C494\"\n          />\n        </BarChart>\n        {loading === true ? (\n          <div\n            style={{\n              clear: \"both\",\n              userSelect: \"none\",\n              pointerEvents: \"none\",\n              height: \"300px\",\n              width: \"1050px\",\n              marginTop: \"-300px\",\n              paddingTop: \"110px\",\n            }}\n          >\n            <span class=\"ant-spin-dot ant-spin-dot-spin\">\n              <i class=\"ant-spin-dot-item\"></i>\n              <i class=\"ant-spin-dot-item\"></i>\n              <i class=\"ant-spin-dot-item\"></i>\n              <i class=\"ant-spin-dot-item\"></i>\n            </span>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  const theme = createTheme({\n    overrides: {\n      MuiTextField: {\n        // Name of the component ⚛️ / style sheet\n\n        root: {\n          marginTop: \"-12.5px\",\n        },\n      },\n      MuiInputLabel: {\n        // Name of the component ⚛️ / style sheet\n\n        root: {\n          // Name of the rule\n          // fontFamily: \"Montserrat\",\n          color: \"#292B2C\",\n          paddingTop: \"10px\",\n          marginBottom: \"-10px\",\n          // paddingLeft: \"10px\",\n          textAlign: \"center\",\n          fontSize: \"12px\",\n          fontWeight: \"normal\",\n          \"&$focused\": {\n            // increase the specificity for the pseudo class\n            color: \"black\",\n          },\n        },\n      },\n\n      MuiInputBase: {\n        root: {\n          // Name of the rule\n          color: \"#292B2C\",\n          paddingTop: \"5px\",\n          marginBottom: \"-20px\",\n          // paddingLeft: \"12px\",\n          fontSize: \"12px\",\n          // fontFamily: \"Montserrat\",\n          fontWeight: \"normal\",\n          \"&$focused\": {\n            // increase the specificity for the pseudo class\n            color: \"black\",\n          },\n        },\n      },\n      MuiSvgIcon: {\n        root: {\n          height: \"12px\",\n        },\n      },\n    },\n  });\n\n  const legendOnclick = (val, dataKey) => {\n    if (val === 1) {\n      if (dataKey === 1) {\n        setOpacity1(0.2);\n      } else if (dataKey === 2) {\n        setOpacity2(0.2);\n      } else if (dataKey === 3) {\n        setOpacity3(0.2);\n      }\n    } else {\n      if (dataKey === 1) {\n        setOpacity1(1);\n      } else if (dataKey === 2) {\n        setOpacity2(1);\n      } else if (dataKey === 3) {\n        setOpacity3(1);\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* {result === \"Pong\" ? ( */}\n      <div className=\"App\" style={{ backgroundColor: \"#F9FAFF\" }}>\n        <div\n          className=\"auth-wrapper\"\n          style={{\n            fontSize: \"25px\",\n          }}\n        >\n          <div className=\"auth-inner-dashboard-expanded-3\">\n            <form>\n              <Row\n                style={{\n                  marginTop: \"-12px\",\n                  marginBottom: \"-15px\",\n                }}\n              >\n                <Col xs=\"6\">\n                  <h3\n                    style={{\n                      textAlign: \"left\",\n                      fontSize: \"28px\",\n                      marginLeft: \"10px\",\n                      fontWeight: \"400\",\n                      color: \"#000000\",\n                      letterSpacing: \"0.5px\",\n                    }}\n                  >\n                    Submission Report\n                  </h3>\n                </Col>\n\n                <Col xs=\"6\" style={{ marginTop: \"-5px\" }}>\n                  <Row style={{ marginLeft: \"74px\" }}>\n                    <Col xs=\"4\" style={{ marginTop: \"5 px\" }}>\n                      <ThemeProvider theme={theme}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                          <DatePicker\n                            views={[\"year\"]}\n                            label=\"Year\"\n                            minDate={new Date(\"2021-04-20\")}\n                            maxDate={new Date()}\n                            value={year}\n                            onChange={(newValue) => {\n                              setYear(newValue);\n                            }}\n                            renderInput={(params) => (\n                              <TextField {...params} helperText={null} />\n                            )}\n                          />\n                        </LocalizationProvider>\n                      </ThemeProvider>\n                    </Col>\n                    <Col xs=\"auto\">\n                      <Button\n                        size=\"sm\"\n                        style={{\n                          fontWeight: \"400\",\n                          fontSize: \"14px\",\n                          borderColor: \"#74797B\",\n                          color: \"#74797B\",\n                          paddingLeft: \"15px\",\n                          paddingRight: \"15px\",\n                          backgroundColor: \"#FFFFFF\",\n                          marginLeft: \"0px\",\n                        }}\n                        onClick={() => {\n                          getData(year);\n                        }}\n                      >\n                        <FontAwesomeIcon\n                          icon={faFilter}\n                          color=\"#74797B\"\n                          // opacity=\"50%\"\n                        />\n                        {\" Filter\"}\n                      </Button>\n                    </Col>\n                    <Col xs=\"auto\">\n                      <Button\n                        size=\"sm\"\n                        style={{\n                          fontWeight: \"400\",\n                          fontSize: \"14px\",\n                          borderColor: \"#74797B\",\n                          color: \"#74797B\",\n                          paddingLeft: \"15px\",\n                          paddingRight: \"15px\",\n                          backgroundColor: \"#FFFFFF\",\n                          marginLeft: \"-20px\",\n                        }}\n                        onClick={() => {\n                          // setLoading(true);\n                          exportToExcel(\n                            year,\n                            landingPageTable,\n                            dataSubmissionTable,\n                            leadSubmissionTable\n                          );\n                        }}\n                      >\n                        <FontAwesomeIcon\n                          icon={faArrowAltCircleDown}\n                          color=\"#74797B\"\n                          // opacity=\"50%\"\n                        />\n                        {\" Download Report\"}\n                      </Button>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n              <div\n                style={{\n                  marginTop: \"20px\",\n                  paddingTop: \"40px\",\n                  border: \"1px solid rgba(34, 35, 58, 0.15)\",\n                }}\n              >\n                <h3\n                  style={{\n                    fontWeight: \"600\",\n                    fontSize: \"16px\",\n                    lineHeight: \"20px\",\n                    textAlign: \"center\",\n                  }}\n                >\n                  Submission Statistics\n                </h3>\n                {chart(chartData)}\n                <Row\n                  className=\"justify-content-md-center\"\n                  style={{ marginTop: \"-60px\", marginBottom: \"20px\" }}\n                >\n                  <Col xs=\"auto\">\n                    <a\n                      style={{\n                        fontSize: \"72px\",\n                        color: \"#465DEF\",\n                        opacity: opacity1.toString(),\n                        userSelect: \"none\",\n                      }}\n                    >\n                      .\n                    </a>\n                    <a\n                      style={{\n                        fontSize: \"12px\",\n                        color: \"#74797B\",\n                        opacity: opacity1.toString(),\n                        userSelect: \"none\",\n                      }}\n                      onClick={() => {\n                        legendOnclick(opacity1, 1);\n                      }}\n                    >\n                      Landing Page/Widget\n                    </a>\n                  </Col>\n                  <Col xs=\"auto\">\n                    <a\n                      style={{\n                        fontSize: \"72px\",\n                        color: \"#FF9F5A\",\n                        opacity: opacity2.toString(),\n                        userSelect: \"none\",\n                      }}\n                    >\n                      .\n                    </a>\n                    <a\n                      style={{\n                        fontSize: \"12px\",\n                        color: \"#74797B\",\n                        opacity: opacity2.toString(),\n                        userSelect: \"none\",\n                      }}\n                      onClick={() => {\n                        legendOnclick(opacity2, 2);\n                      }}\n                    >\n                      Data Submission\n                    </a>\n                  </Col>\n                  <Col xs=\"auto\">\n                    <a\n                      style={{\n                        fontSize: \"72px\",\n                        color: \"#00C494\",\n                        opacity: opacity3.toString(),\n                        userSelect: \"none\",\n                      }}\n                    >\n                      .\n                    </a>\n                    <a\n                      style={{\n                        fontSize: \"12px\",\n                        color: \"#74797B\",\n                        opacity: opacity3.toString(),\n                        userSelect: \"none\",\n                      }}\n                      onClick={() => {\n                        legendOnclick(opacity3, 3);\n                      }}\n                    >\n                      Leads Submission\n                    </a>\n                  </Col>\n                </Row>\n              </div>\n              <div\n                style={{\n                  marginTop: \"20px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid rgba(34, 35, 58, 0.15)\",\n                }}\n              >\n                <h3\n                  style={{\n                    fontWeight: \"600\",\n                    fontSize: \"16px\",\n                    lineHeight: \"20px\",\n                    textAlign: \"center\",\n                    marginTop: \"30px\",\n                    marginBottom: \"10px\",\n                  }}\n                >\n                  Landing Page/Widget\n                </h3>\n                {/* <Table1 /> */}\n                {Table1(loading)}\n              </div>\n              <div\n                style={{\n                  marginTop: \"20px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid rgba(34, 35, 58, 0.15)\",\n                }}\n              >\n                <h3\n                  style={{\n                    fontWeight: \"600\",\n                    fontSize: \"16px\",\n                    lineHeight: \"20px\",\n                    textAlign: \"center\",\n                    marginTop: \"30px\",\n                    marginBottom: \"10px\",\n                  }}\n                >\n                  Data Submission\n                </h3>\n                {Table2(loading)}\n              </div>\n              <div\n                style={{\n                  marginTop: \"20px\",\n                  marginBottom: \"10px\",\n                  border: \"1px solid rgba(34, 35, 58, 0.15)\",\n                }}\n              >\n                <h3\n                  style={{\n                    fontWeight: \"600\",\n                    fontSize: \"16px\",\n                    lineHeight: \"20px\",\n                    textAlign: \"center\",\n                    marginTop: \"30px\",\n                    marginBottom: \"10px\",\n                  }}\n                >\n                  Lead Submission\n                </h3>\n                {Table3(loading)}\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Dashboard;\nReactDOM.render(Dashboard, document.querySelector(\"#root\"));\n","import moment from \"moment\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nexport const exportToExcel = (year, data1, data2, data3) => {\n  const fileType =\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".xlsx\";\n  const fileId = `Submission Report ${moment(year).format(\"YYYY\")}`;\n\n  const ws1 = XLSX.utils.json_to_sheet(data1, {\n    origin: \"A10\",\n  });\n  const ws2 = XLSX.utils.json_to_sheet(data2, {\n    origin: \"A10\",\n  });\n  const ws3 = XLSX.utils.json_to_sheet(data3, {\n    origin: \"A10\",\n  });\n\n  var wscols = [{ wch: 40 }];\n\n  ws1[\"!cols\"] = wscols;\n  ws2[\"!cols\"] = wscols;\n  ws3[\"!cols\"] = wscols;\n\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws1, \"Landing Page\");\n  XLSX.utils.book_append_sheet(wb, ws2, \"Data Submission\");\n  XLSX.utils.book_append_sheet(wb, ws3, \"Lead Submission\");\n\n  XLSX.utils.sheet_add_json(\n    ws1,\n    [\n      {\n        Name: `Landing Page / Widget`,\n      },\n      {\n        Name: \"\",\n        RollNo: \"\",\n      },\n      {\n        Name: \"Duration\",\n        RollNo: `1 Year`,\n      },\n      {\n        Name: \"Date Period\",\n        RollNo: `${moment(year).format(\"YYYY\")}`,\n      },\n    ],\n    {\n      skipHeader: true,\n      origin: \"A1\",\n    }\n  );\n\n  XLSX.utils.sheet_add_json(\n    ws2,\n    [\n      {\n        Name: `Data Submission`,\n      },\n      {\n        Name: \"\",\n        RollNo: \"\",\n      },\n      {\n        Name: \"Duration\",\n        RollNo: `1 Year`,\n      },\n      {\n        Name: \"Date Period\",\n        RollNo: `${moment(year).format(\"YYYY\")}`,\n      },\n    ],\n    {\n      skipHeader: true,\n      origin: \"A1\",\n    }\n  );\n  XLSX.utils.sheet_add_json(\n    ws3,\n    [\n      {\n        Name: `Lead Submission`,\n      },\n      {\n        Name: \"\",\n        RollNo: \"\",\n      },\n      {\n        Name: \"Duration\",\n        RollNo: `1 Year`,\n      },\n      {\n        Name: \"Date Period\",\n        RollNo: `${moment(year).format(\"YYYY\")}`,\n      },\n    ],\n    {\n      skipHeader: true,\n      origin: \"A1\",\n    }\n  );\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n  const excelData = new Blob([excelBuffer], { type: fileType });\n  FileSaver.saveAs(excelData, fileId + fileExtension);\n};\n","import React from \"react\";\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./css/App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Dashboard from \"./pages/dashboard\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}